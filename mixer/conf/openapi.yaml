openapi: "3.0.2"

info:
  version: "3.2.0"
  title: Ergo Mixer API
  description: API docs for Ergo mixer.

components:

  schemas:
    ApiError:
      type: object
      required:
      - success
      - message
      properties:
        success:
          type: boolean
          description: status
          example: false
        message:
          type: string
          nullable: true
          description: Detailed error description
    ApiSuccess:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          description: status
          example: true

paths:
  /mix/request:
    post:
      summary: Create a new mix address with/without tokens
      operationId: mixRequest
      tags:
        - mix
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Create a mix request with/without tokens
              type: array
              format: object
              example: [
              {
                "amount": 100000000000,
                "withdraw": "9g1p6UU8XoAeU4yGPLpbTHYiG8aBHwfCFzQqJZrfzuLnmF3zb7P",
                "token": 30,
                "mixingTokenId": "",
                "mixingTokenAmount": 0
              },
              {
                "amount": 100000000000,
                "withdraw": "9g1p6UU8XoAeU4yGPLpbTHYiG8aBHwfCFzQqJZrfzuLnmF3zb7P",
                "token": 30,
                "mixingTokenId": "",
                "mixingTokenAmount": 0
              },
              {
                "amount": 250000000000,
                "withdraw": "9g1p6UU8XoAeU4yGPLpbTHYiG8aBHwfCFzQqJZrfzuLnmF3zb7P",
                "token": 30,
                "mixingTokenId": "",
                "mixingTokenAmount": 0
              },
              {
                "amount": 250000000000,
                "withdraw": "9g1p6UU8XoAeU4yGPLpbTHYiG8aBHwfCFzQqJZrfzuLnmF3zb7P",
                "token": 30,
                "mixingTokenId": "",
                "mixingTokenAmount": 0
              }
              ]
      responses:
        '200':
          description: Status of operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                example: {
                  "success": true,
                  "mixId": "d35bfc0e-acff-475d-bd6d-60dc168672f1"
                }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /mix/request/list:
    get:
      summary: returns list of all mixes
      operationId: mixGroupRequestList
      tags:
        - mix
      responses:
        '200':
          description: list of all mixes
          content:
            application/json:
              schema:
                items:
                  example: [
                  {
                    "id": "3443bb64-0fe7-4973-bb91-b0bb35141d56",
                    "amount": 100624000000,
                    "tokenAmount": 0,
                    "createdDate": "2020-12-20 20:16:46",
                    "deposit": "9eYCS99j64guuSUGcgrTVWWduCHk9Dfd1txnZv5JFBrZwXQzivY",
                    "status": "queued",
                    "mixingAmount": 100000000000,
                    "mixingTokenId": "",
                    "mixingTokenAmount": 0,
                    "doneDeposit": 0,
                    "doneTokenDeposit": 0,
                    "groupStat": null
                  },
                  {
                    "id": "5305a847-c5cb-440d-bd9a-961cfc819f26",
                    "amount": 100624000000,
                    "tokenAmount": 0,
                    "createdDate": "2020-12-20 20:17:37",
                    "deposit": "9hNn8pQt9T7PcjyntG2JSZn1MqwQ2tnjyekQdgx5uabXSCoKLJX",
                    "status": "queued",
                    "mixingAmount": 100000000000,
                    "mixingTokenId": "",
                    "mixingTokenAmount": 0,
                    "doneDeposit": 0,
                    "doneTokenDeposit": 0,
                    "groupStat": null
                  }
                  ]
  /mix/request/activeList:
    get:
      summary: returns list of active mixes
      operationId: mixGroupRequestActiveList
      tags:
        - mix
      responses:
        '200':
          description: returns active group mixes. contains more info to be shown about deposits and ...
          content:
            application/json:
              schema:
                items:
                  example: [
                  {
                    "id": "3443bb64-0fe7-4973-bb91-b0bb35141d56",
                    "amount": 100624000000,
                    "tokenAmount": 0,
                    "createdDate": "2020-12-23 20:16:46",
                    "deposit": "9eYCS99j64guuSUGcgrTVWWduCHk9Dfd1txnZv5JFBrZwXQzivY",
                    "status": "queued",
                    "mixingAmount": 100000000000,
                    "mixingTokenId": "",
                    "mixingTokenAmount": 0,
                    "doneDeposit": 0,
                    "doneTokenDeposit": 0,
                    "groupStat": {
                      "numBoxes": 1,
                      "numComplete": 0,
                      "numWithdrawn": 0,
                      "totalMixRound": 0,
                      "doneMixRound": 0
                    }
                  },
                  {
                    "id": "5305a847-c5cb-440d-bd9a-961cfc819f26",
                    "amount": 100624000000,
                    "tokenAmount": 0,
                    "createdDate": "2020-12-23 20:17:37",
                    "deposit": "9hNn8pQt9T7PcjyntG2JSZn1MqwQ2tnjyekQdgx5uabXSCoKLJX",
                    "status": "queued",
                    "mixingAmount": 100000000000,
                    "mixingTokenId": "",
                    "mixingTokenAmount": 0,
                    "doneDeposit": 0,
                    "doneTokenDeposit": 0,
                    "groupStat": {
                      "numBoxes": 1,
                      "numComplete": 0,
                      "numWithdrawn": 0,
                      "totalMixRound": 0,
                      "doneMixRound": 0
                    }
                  }
                  ]
  /mix/request/completeList:
    get:
      summary: returns list of completed mixes
      operationId: mixGroupRequestCompleteList
      tags:
        - mix
      responses:
        '200':
          description: list of completed mixes
          content:
            application/json:
              schema:
                items:
                  example: [
                  {
                    "id": "833c4e1d-e933-4bfb-b084-9c3bb84b35a2",
                    "amount": 30369000000,
                    "tokenAmount": 0,
                    "createdDate": "2020-12-21 16:25:35",
                    "deposit": "9hNn8pQt9T7PcjyntG2JSZn1MqwQ2tnjyekQdgx5uabXSCoKLJX",
                    "status": "complete",
                    "mixingAmount": 30000000000,
                    "mixingTokenId": "",
                    "mixingTokenAmount": 0,
                    "doneDeposit": 30369000000,
                    "doneTokenDeposit": 0,
                    "groupStat": null
                  }
                  ]
  /mix/request/{id}/list:
    get:
      summary: returns all boxes of a mix or covert address
      operationId: mixRequestList
      tags:
        - mix
      parameters:
        - in: path
          name: id
          required: true
          description: ID of a wanted mix or covert
          schema:
            type: string
      responses:
        '200':
          description: mix boxes of a specific group or covert request
          content:
            application/json:
              schema:
                type: array
                example: [
                {
                  "id": "ae2fbaf2-df4a-4a97-b7bb-9899d0effb59",
                  "createdDate": "14:17:37",
                  "amount": 100000000000,
                  "rounds": 0,
                  "status": "queued",
                  "deposit": "9g4tcxcrWUVEcyW5C9oanhEb3HCEVRy1Ed92jdjx8XFY3i91wR7",
                  "withdraw": "",
                  "boxType": "None",
                  "withdrawStatus": "nothing",
                  "withdrawTxId": "",
                  "lastMixTime": "None",
                  "mixingTokenId": "",
                  "mixingTokenAmount": 0
                }
                ]
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /mix/fee:
    get:
      summary: returns info about current fee parameters
      operationId: mixingFee
      tags:
        - mix
      responses:
        '200':
          description: info about current fee parameters
          content:
            application/json:
              schema:
                type: object
                example: {
                  "boxInTransaction": 10,
                  "distributeFee": 1500000,
                  "startFee": 2500000,
                  "180": 720000000,
                  "90": 360000000,
                  "60": 240000000,
                  "30": 120000000,
                  "rate": 200
                }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /mix/supported:
    get:
      summary: returns list of supported assets
      operationId: supported
      tags:
        - mix
      responses:
        '200':
          description: list of supported assets
          content:
            application/json:
              schema:
                type: array
                example: [
                {
                  "name": "ERG",
                  "id": "",
                  "rings": [
                    1000000000,
                    10000000000,
                    100000000000,
                    250000000000
                  ],
                  "decimals": 9
                },
                {
                  "name": "TestToken",
                  "id": "faea358564f4f14dd0f3eb4827bbfc9006d4c3cb76d5b461274f11f982fe1df8",
                  "rings": [
                    1000000,
                    5000000,
                    10000000,
                    100000000
                  ],
                  "decimals": 7
                }
                ]
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /mix/withdraw:
    post:
      summary: set or edit withdraw address and/or withdraw request
      operationId: withdraw
      tags:
        - mix
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Add withdraw address to database or change status withdraw
              type: array
              format: object
              example: {
                "nonStayAtMix": true,
                "withdrawAddress": "9gPTjYj7E9mix5rEF8Gvny2E6AiskhZF4G9YH2Noj8MqDU1aw9A",
                "mixId": "3ea899b5-f632-42b6-953c-6510a348b02f"
              }
      responses:
        '200':
          description: Status of operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccess'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /covert/list:
    get:
      summary: returns list of covert addresses
      operationId: covertList
      tags:
        - covert
      responses:
        '200':
          description: list covert info to be shown, includes covert's supported assets sorted based on latest activity
          content:
            application/json:
              schema:
                items:
                  example: [
                  {
                    "nameCovert": "test1",
                    "id": "af7480a0-8566-4bc9-b0e0-dd0b5f8857af",
                    "createdDate": "2020-12-22 16:24:14",
                    "deposit": "9hB26hp4tRr7r4rc4MxWWNL7hSKGVGgjc8Wyjdzs7fDK5dGDXLk",
                    "numRounds": 30,
                    "assets": [
                    {
                      "tokenId": "",
                      "ring": 250000000000,
                      "need": 251372500000,
                      "confirmedDeposit": 0,
                      "lastActivity": "2020-12-22 16:24:14",
                      "currentMixingAmount": 0
                    },
                    {
                      "tokenId": "faea358564f4f14dd0f3eb4827bbfc9006d4c3cb76d5b461274f11f982fe1df8",
                      "ring": 5000000,
                      "need": 5025000,
                      "confirmedDeposit": 0,
                      "lastActivity": "2020-12-22 17:33:34",
                      "currentMixingAmount": 0
                    }
                    ],
                    "isManualCovert": false
                  }
                  ]
  /covert:
    post:
      summary: Create covert address
      operationId: covertRequest
      tags:
        - covert
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Create covert address
              type: object
              required:
                - addresses
                - numRounds
                - nameCovert
              example: {
                "addresses": [
                  "9g1p6UU8XoAeU4yGPLpbTHYiG8aBHwfCFzQqJZrfzuLnmF3zb7P"
                ],
                "numRounds": 30,
                "nameCovert": "test1"
              }
      responses:
        '200':
          description: Status of operation
          content:
            application/json:
              schema:
                type: object
                example: {
                  "success": true,
                  "depositAddress": "9hB26hp4tRr7r4rc4MxWWNL7hSKGVGgjc8Wyjdzs7fDK5dGDXLk"
                }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /covert/{covertId}/asset:
    get:
      summary: returns list of a covert's assets
      operationId: covertAssetList
      tags:
        - covert
      parameters:
        - in: path
          name: covertId
          required: true
          description: ID of a wanted covert
          schema:
            type: string
      responses:
        '200':
          description: list of a covert's assets
          content:
            application/json:
              schema:
                type: object
                example: {
                  "nameCovert": "test1",
                  "id": "af7480a0-8566-4bc9-b0e0-dd0b5f8857af",
                  "createdDate": "2020-12-22 16:24:14",
                  "deposit": "9hB26hp4tRr7r4rc4MxWWNL7hSKGVGgjc8Wyjdzs7fDK5dGDXLk",
                  "numRounds": 30,
                  "assets": [
                  {
                    "tokenId": "",
                    "ring": 250000000000,
                    "need": 251372500000,
                    "confirmedDeposit": 0,
                    "lastActivity": "2020-12-22 16:24:14",
                    "currentMixingAmount": 0
                  }
                  ],
                  "isManualCovert": false
                }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      summary: Add or update a covert's assets
      operationId: covertAddOrUpdate
      tags:
        - covert
      parameters:
        - in: path
          name: covertId
          required: true
          description: ID of a wanted covert
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Create covert address
              type: object
              required:
                - tokenId
                - ring
              example: {
                "tokenId": "",
                "ring": 100000000000
              }
      responses:
        '200':
          description: Status of operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccess'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /covert/{covertId}/address:
    get:
      summary: returns list of withdraw addresses of a covert request
      operationId: getCovertAddresses
      tags:
        - covert
      parameters:
        - in: path
          name: covertId
          required: true
          description: ID of a wanted covert
          schema:
            type: string
      responses:
        '200':
          description: list of addresses
          content:
            application/json:
              schema:
                type: array
                format: string
                example: ["9g1p6UU8XoAeU4yGPLpbTHYiG8aBHwfCFzQqJZrfzuLnmF3zb7P"]
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      summary: update list of withdraw addresses of a covert request
      operationId: setCovertAddresses
      tags:
        - covert
      parameters:
        - in: path
          name: covertId
          required: true
          description: ID of a wanted covert
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: update list of withdraw addresses of a covert request
              type: object
              required:
                - addresses
              example: {
                "addresses": [
                  "9g1p6UU8XoAeU4yGPLpbTHYiG8aBHwfCFzQqJZrfzuLnmF3zb7P"
                ]
              }
      responses:
        '200':
          description: Status of operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccess'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /covert/{covertId}/name:
    post:
      summary: Update name of a covert
      operationId: covertChangeName
      tags:
        - covert
      parameters:
        - in: path
          name: covertId
          required: true
          description: ID of a wanted covert
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Create covert address
              type: object
              required:
                - name
              example: {
                "name": "test1"
              }
      responses:
        '200':
          description: Status of operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccess'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /rings:
    get:
      summary: returns rings statistics
      operationId: rings
      tags:
        - statistics
      responses:
        '200':
          description: calculate number of unSpent halfBox and number of spent halfBox in `periodTime`
          content:
            application/json:
              schema:
                items:
                  example: {
                    "991594920258238d11d7713af0e9a1ebcf49a765bc5e5066bfde95bcf720a585": {
                      "1000": {
                        "spentHalf": 0,
                        "unspentHalf": 6
                      }
                    },
                    "erg": {
                      "250000000000": {
                        "spentHalf": 398,
                        "unspentHalf": 3
                      },
                      "100000000000": {
                        "spentHalf": 562,
                        "unspentHalf": 8
                      }
                    }
                  }
  /info:
    get:
      summary: returns general information of Mixer
      operationId: getInfo
      tags:
        - info
      responses:
        '200':
          description: information of Mixer
          content:
            application/json:
              schema:
                items:
                  example: {
                    "isWindows": false,
                    "versionMixer": "3.1.0",
                    "ergoExplorer": "https://api.ergoplatform.com",
                    "ergoExplorerFront": "https://explorer.ergoplatform.com",
                    "ergoNode": [
                    {
                      "url": "http://88.198.13.202:9053",
                      "canConnect": true
                    },
                    {
                      "url": "http://159.65.11.55:9053",
                      "canConnect": true
                    },
                    {
                      "url": "http://165.227.26.175:9053",
                      "canConnect": true
                    },
                    {
                      "url": "http://159.89.116.15:9053",
                      "canConnect": true
                    }
                    ]
                  }
  /address/generate/from_node:
    post:
      summary: recives addresses form node
      operationId: generateAddress
      tags:
        - utils
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Status of operation
              type: object
              required:
                - nodeAddress
                - apiKey
                - countAddress
              example: {
                "nodeAddress": "http://127.0.0.1:9053",
                "apiKey": "abc",
                "countAddress": 2
              }
      responses:
        '200':
          description: List of addresses
          content:
            application/json:
              schema:
                description: List of wallet address
                type: array
                format: string
                example: [
                  "3WwpvNSXu6r8bpjUmV9913mXTMQBd2WiLMvW1QcztHYvQ74FBzQT",
                  "3WxGbEh5NFdSCRaTm5MF9HnzEz2MiR1eWa8PmhdEXv12nTfPoha1",
                  "3Wx19pH67VzTvAEDAUfQShk4meCQmUPnTmJ3pkgxLdE1do3yLvfS"
                ]
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /backup:
    get:
      summary: downloads the backup of database (this route don't work with swagger for download backup file run this url in browser)
      operationId: backup
      tags:
        - utils
      responses:
        '200':
          description: download the backup of database
          content:
            application/zip:
              schema:
                type: string
                format: binary
  /restore:
    post:
      summary: uploads a backup and restores it
      operationId: restore
      tags:
        - utils
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                myFile:
                  type: string
                  format: binary
      responses:
        '503':
          description: This api restores a backup and shut the mixer down since `Service Unavailable` error is okay for this api.
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /exit:
    post:
      summary: endpoint to exit the app
      operationId: exit
      tags:
        - utils
      requestBody:
        required: false
        content:
          application/json:
            schema:
              description: endpoint to exit the app
              type: object
              example: {}
      responses:
        '503':
          description: exit the app
